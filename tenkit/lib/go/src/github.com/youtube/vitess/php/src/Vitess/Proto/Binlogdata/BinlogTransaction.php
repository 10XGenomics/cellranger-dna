<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: binlogdata.proto

namespace Vitess\Proto\Binlogdata {

  class BinlogTransaction extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Binlogdata\BinlogTransaction\Statement[]  */
    public $statements = array();
    
    /**  @var \Vitess\Proto\Query\EventToken */
    public $event_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.BinlogTransaction');

      // REPEATED MESSAGE statements = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "statements";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Binlogdata\BinlogTransaction\Statement';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE event_token = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "event_token";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\EventToken';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <statements> has a value
     *
     * @return boolean
     */
    public function hasStatements(){
      return $this->_has(1);
    }
    
    /**
     * Clear <statements> value
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction
     */
    public function clearStatements(){
      return $this->_clear(1);
    }
    
    /**
     * Get <statements> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function getStatements($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <statements> value
     *
     * @param \Vitess\Proto\Binlogdata\BinlogTransaction\Statement $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction
     */
    public function setStatements(\Vitess\Proto\Binlogdata\BinlogTransaction\Statement $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <statements>
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement[]
     */
    public function getStatementsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <statements>
     *
     * @param \Vitess\Proto\Binlogdata\BinlogTransaction\Statement $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction
     */
    public function addStatements(\Vitess\Proto\Binlogdata\BinlogTransaction\Statement $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <event_token> has a value
     *
     * @return boolean
     */
    public function hasEventToken(){
      return $this->_has(4);
    }
    
    /**
     * Clear <event_token> value
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction
     */
    public function clearEventToken(){
      return $this->_clear(4);
    }
    
    /**
     * Get <event_token> value
     *
     * @return \Vitess\Proto\Query\EventToken
     */
    public function getEventToken(){
      return $this->_get(4);
    }
    
    /**
     * Set <event_token> value
     *
     * @param \Vitess\Proto\Query\EventToken $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction
     */
    public function setEventToken(\Vitess\Proto\Query\EventToken $value){
      return $this->_set(4, $value);
    }
  }
}

