<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto

namespace Vitess\Proto\Query\StreamEvent {

  class Statement extends \DrSlump\Protobuf\Message {

    /**  @var int - \Vitess\Proto\Query\StreamEvent\Statement\Category */
    public $category = null;
    
    /**  @var string */
    public $table_name = null;
    
    /**  @var \Vitess\Proto\Query\Field[]  */
    public $primary_key_fields = array();
    
    /**  @var \Vitess\Proto\Query\Row[]  */
    public $primary_key_values = array();
    
    /**  @var string */
    public $sql = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.StreamEvent.Statement');

      // OPTIONAL ENUM category = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\StreamEvent\Statement\Category';
      $descriptor->addField($f);

      // OPTIONAL STRING table_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE primary_key_fields = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "primary_key_fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Query\Field';
      $descriptor->addField($f);

      // REPEATED MESSAGE primary_key_values = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "primary_key_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Query\Row';
      $descriptor->addField($f);

      // OPTIONAL BYTES sql = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <category> value
     *
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function clearCategory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <category> value
     *
     * @return int - \Vitess\Proto\Query\StreamEvent\Statement\Category
     */
    public function getCategory(){
      return $this->_get(1);
    }
    
    /**
     * Set <category> value
     *
     * @param int - \Vitess\Proto\Query\StreamEvent\Statement\Category $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function setCategory( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function clearTableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function setTableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <primary_key_fields> has a value
     *
     * @return boolean
     */
    public function hasPrimaryKeyFields(){
      return $this->_has(3);
    }
    
    /**
     * Clear <primary_key_fields> value
     *
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function clearPrimaryKeyFields(){
      return $this->_clear(3);
    }
    
    /**
     * Get <primary_key_fields> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Query\Field
     */
    public function getPrimaryKeyFields($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <primary_key_fields> value
     *
     * @param \Vitess\Proto\Query\Field $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function setPrimaryKeyFields(\Vitess\Proto\Query\Field $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <primary_key_fields>
     *
     * @return \Vitess\Proto\Query\Field[]
     */
    public function getPrimaryKeyFieldsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <primary_key_fields>
     *
     * @param \Vitess\Proto\Query\Field $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function addPrimaryKeyFields(\Vitess\Proto\Query\Field $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <primary_key_values> has a value
     *
     * @return boolean
     */
    public function hasPrimaryKeyValues(){
      return $this->_has(4);
    }
    
    /**
     * Clear <primary_key_values> value
     *
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function clearPrimaryKeyValues(){
      return $this->_clear(4);
    }
    
    /**
     * Get <primary_key_values> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Query\Row
     */
    public function getPrimaryKeyValues($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <primary_key_values> value
     *
     * @param \Vitess\Proto\Query\Row $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function setPrimaryKeyValues(\Vitess\Proto\Query\Row $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <primary_key_values>
     *
     * @return \Vitess\Proto\Query\Row[]
     */
    public function getPrimaryKeyValuesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <primary_key_values>
     *
     * @param \Vitess\Proto\Query\Row $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function addPrimaryKeyValues(\Vitess\Proto\Query\Row $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function clearSql(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(5);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\StreamEvent\Statement
     */
    public function setSql( $value){
      return $this->_set(5, $value);
    }
  }
}

