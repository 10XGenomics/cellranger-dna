<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto

namespace Vitess\Proto\Query {

  class Field extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \Vitess\Proto\Query\Type */
    public $type = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var string */
    public $org_table = null;
    
    /**  @var string */
    public $database = null;
    
    /**  @var string */
    public $org_name = null;
    
    /**  @var int */
    public $column_length = null;
    
    /**  @var int */
    public $charset = null;
    
    /**  @var int */
    public $decimals = null;
    
    /**  @var int */
    public $flags = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.Field');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\Type';
      $descriptor->addField($f);

      // OPTIONAL STRING table = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING org_table = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "org_table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING org_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "org_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 column_length = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "column_length";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 charset = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 decimals = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "decimals";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 flags = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Vitess\Proto\Query\Type
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Vitess\Proto\Query\Type $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <table> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setTable( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <org_table> has a value
     *
     * @return boolean
     */
    public function hasOrgTable(){
      return $this->_has(4);
    }
    
    /**
     * Clear <org_table> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearOrgTable(){
      return $this->_clear(4);
    }
    
    /**
     * Get <org_table> value
     *
     * @return string
     */
    public function getOrgTable(){
      return $this->_get(4);
    }
    
    /**
     * Set <org_table> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setOrgTable( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(5);
    }
    
    /**
     * Clear <database> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearDatabase(){
      return $this->_clear(5);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(5);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setDatabase( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <org_name> has a value
     *
     * @return boolean
     */
    public function hasOrgName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <org_name> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearOrgName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <org_name> value
     *
     * @return string
     */
    public function getOrgName(){
      return $this->_get(6);
    }
    
    /**
     * Set <org_name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setOrgName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <column_length> has a value
     *
     * @return boolean
     */
    public function hasColumnLength(){
      return $this->_has(7);
    }
    
    /**
     * Clear <column_length> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearColumnLength(){
      return $this->_clear(7);
    }
    
    /**
     * Get <column_length> value
     *
     * @return int
     */
    public function getColumnLength(){
      return $this->_get(7);
    }
    
    /**
     * Set <column_length> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setColumnLength( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(8);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearCharset(){
      return $this->_clear(8);
    }
    
    /**
     * Get <charset> value
     *
     * @return int
     */
    public function getCharset(){
      return $this->_get(8);
    }
    
    /**
     * Set <charset> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setCharset( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <decimals> has a value
     *
     * @return boolean
     */
    public function hasDecimals(){
      return $this->_has(9);
    }
    
    /**
     * Clear <decimals> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearDecimals(){
      return $this->_clear(9);
    }
    
    /**
     * Get <decimals> value
     *
     * @return int
     */
    public function getDecimals(){
      return $this->_get(9);
    }
    
    /**
     * Set <decimals> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setDecimals( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(10);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \Vitess\Proto\Query\Field
     */
    public function clearFlags(){
      return $this->_clear(10);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(10);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\Field
     */
    public function setFlags( $value){
      return $this->_set(10, $value);
    }
  }
}

